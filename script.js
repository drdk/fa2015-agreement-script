var Agreement = function () {

    return {
        min: 1,
        max: 5,
        noAnswer: 0,
        qCnt: parties[0].answer.length,
        
        validatePartyAnswers: function() {
            // Validate party answers
            for (var i = 0; i < parties.length; i++) {
                var answer = parties[i].answer;

                if (answer.length != this.qCnt) {
                    console.log("Answer array has invalid length for party with id: " + parties[i].id);
                    return false;
                }

                for (var j = 0; j < this.qCnt; j++)
                {
                    if (answer[j] < this.min || answer[j] > this.max) {
                        console.log("Invalid value(s) in answers from party with id: " + parties[i].id);
                        return false;
                    }
                }

                return true;
            }
        },

        // Given a user answer array agreements returns an array of objects consisting of a party and the users agreement % with the party. 
        // The array is ordered by agreement-level.
        // u [0,1,2,3,5,6,7]
        agreements: function(u) {
            if(!this.validatePartyAnswers()) {
                return false;
            }
            
            if (!this.validateUserAnswers(u)) {
                console.log("Invalid answer array");
                return false;
            }

            var result = [];
            for (var i = 0; i < parties.length; i++) {
                var p = parties[i];
                result.push({ party: p, agreement: this.calculateAgreement(u, p.answer) });
            }

            result.sort(function(a, b) {
                return b.agreement - a.agreement;
            });

            return result;
        },

        // Helper-method - Calcualtes the agreement percentage between two answer arrays. First argument must be the users answers and the second should be the partys answers
        calculateAgreement: function(u, p) {

            if (u.length != this.qCnt || p.length != this.qCnt)
                return undefined;

            var cnt = p.length;
            var skip = 0;
            var sum = 0;

            // Euclidean distance. Ignore users "noanswers"
            for (var i = 0; i < this.qCnt; i++) {
                u[i] == this.noAnswer ? skip++ : sum += Math.pow(u[i] - p[i], 2);
            }

            if (skip == this.qCnt)
                return undefined;

            var maxDist = Math.sqrt((this.qCnt - skip) * Math.pow(this.max - this.min, 2));
            var dist = Math.sqrt(sum);
            
            // Return the agreement percentage
            return (1 - dist / maxDist) * 100;
        },

        // Helper-method - Validates a user answer array. 
        validateUserAnswers: function (a) {

            var ok = false;

            // The length of the array must be equal to the number of questions
            if (a.length != this.qCnt) {
                console.log("Answer array must contain " + this.qCnt + " answers.");
                return false;
            }

            var noAnswerCnt = 0;
            for (var i = 0; i < this.qCnt; i++) {
                if (a[i] == this.noAnswer) {
                    noAnswerCnt++;
                }
                else if (a[i] < this.min || a[i] > this.max) {
                    console.log("Answer array contains invalid value(s): " + a[i]);
                    return false;
                }                
            }
            if (noAnswerCnt == this.qCnt) {
                //console.log("Answer array must contain at least one answer");
                //return false;
            }

            return true;
        }
    }
}
// parties answers generated by 
var parties = [ 
    { id: 1, answer: [ 5, 3, 1, 1, 5, 5, 5, 4 ] },
    { id: 2, answer: [ 5, 3, 2, 1, 5, 4, 4, 4 ] },
    { id: 6, answer: [ 5, 1, 5, 1, 5, 5, 5, 4 ] },
    { id: 7, answer: [ 2, 3, 5, 5, 5, 5, 5, 3 ] },
    { id: 8, answer: [ 2, 5, 5, 5, 2, 2, 1, 1 ] },
    { id: 9, answer: [ 5, 1, 1, 1, 5, 5, 5, 5 ] },
    { id: 10, answer: [ 5, 1, 1, 1, 5, 5, 5, 5 ] },
    { id: 11, answer: [ 2, 5, 5, 5, 3, 1, 1, 1 ] },
    { id: 12, answer: [ 5, 2, 1, 1, 5, 5, 5, 5 ] },
    { id: 13, answer: [ 1, 5, 5, 5, 3, 3, 3, 1 ] }
];
